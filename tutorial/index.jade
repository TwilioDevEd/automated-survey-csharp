.chapter(data-title="Automated surveys with Twilio and ASP.NET MVC")
  .step(data-file="AutomatedSurvey.Web/Models/Survey.cs", data-highlight="9-17")
    :markdown
      ### About this application

      This [ASP.NET MVC](http://www.asp.net/mvc) sample application demonstrates
      using Twilio and [TwiML](https://www.twilio.com/docs/api/twiml) to deliver a survey that can be completed via voice call.
      The survey actually works via SMS text messages, too, but we're going to
      focus on the looping logic necessary to conduct an interview over the
      phone.

      In this tutorial, we'll highlight the code that interacts with Twilio
      and in turn makes the application tick. To run this sample app yourself,
      [download the code and follow the instructions on
      GitHub](https://github.com/TwilioDevEd/automated-survey-csharp).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

  .step
    :markdown
      ### Configure the application

      The steps to configure the application are detailed [here](https://github.com/TwilioDevEd/automated-survey-csharp#running-locally).

  .step
    :markdown
      ### Configure Twilio Number

      In order to receive incoming calls we need to first configure our [Twilio phone number](https://www.twilio.com/user/account/phone-numbers/incoming).
      ![Configure Twilio Phone](https://raw.github.com/TwilioDevEd/automated-survey-csharp/master/configure-twilio-phone.png)

      Click on the red number, and then set the Voice Request URL. Don’t forget to save the changes.
      ![Set Voice Request URL](https://raw.github.com/TwilioDevEd/automated-survey-csharp/master/set-voice-request-url.png)

  .step(data-file="AutomatedSurvey.Web/Migrations/Configuration.cs" data-highlight="13-49")
    :markdown
      ### Create a Survey
      The questions are created using the `Configuration.Seed` method.
      The advantage of this approach is that the data is populated when you run `Update-Database`.

      ---

      **See Also**
      * [Use Code First Migrations to Seed the Database](http://www.asp.net/web-api/overview/data/using-web-api-with-entity-framework/part-3)

  .step(data-file="AutomatedSurvey.Web/Controllers/SurveysController.cs", data-highlight="24-26")
    :markdown
      ### Respond to Twilio’s initial request
      Whenever one of your [Twilio phone numbers](https://www.twilio.com/user/account/phone-numbers/incoming) receives a call, Twillo will make an HTTP request to the voice request URL configured under it with the HTTP method specified (either GET or POST).

      For this application Twilio should be configured to make a GET request to the application’s `surveys/connectcall` endpoint. Here the application will find the last created survey, and after stating its name and welcoming to the user to it using TwiML’s [`<Say>`](https://www.twilio.com/docs/api/twiml/say) verb, it will redirect the call to the first question using the [`<Redirect>`](https://www.twilio.com/docs/api/twiml/redirect) verb.

      ---

      **See Also**
      * [Twilio webhooks](https://www.twilio.com/platform/webhooks)
      * [Twilio Voice](Your Response https://www.twilio.com/docs/api/twiml/your_response)
      * [HTTP Methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)

  .step(data-file="AutomatedSurvey.Web/Domain/Response.cs", data-highlight="29-41")
    :markdown
      ### Ask the caller a question
      At this point the Twilio client has made a request for the first question. We’re using the [twilio-csharp](https://github.com/twilio/twilio-csharp) library to generate a TwiML response.

      The process goes as follows:

      1. Ask a question.
      2. Say the instructions on how to answer that questions.
      3. Record the caller’s answer to the question.

      Bear in mind that the instructions on how to answer a question depend on the type of question we ask. The strategy to record an answer depends on the given question, it could require either keypad input or voice input.

      ---

      **See Also**
      * [Twilio.TwiML](https://www.nuget.org/packages/Twilio.TwiML/)
      * [Twilio.Mvc](https://www.nuget.org/packages/Twilio.Mvc/)

  .step(data-file="AutomatedSurvey.Web/Controllers/AnswersController.cs", data-highlight="29-40")
    :markdown
      ### Record the caller’s response
      If the question is of type `QuestionType.Voice`, then we use [`<Record>`](https://www.twilio.com/docs/api/twiml/record) verb, otherwise we use the [`Gather`](https://www.twilio.com/docs/api/twiml/gather) verb. Both verbs take an `action` attribute and a `method` attribute. Twilio’s client will use both attributes to make a request to our route that will store the caller’s answer to the question.

      Since we want to create a new resource in our server we’ll use the `POST` method. For convenience, the `action` url will be `answers/create`.

  .step(data-file="AutomatedSurvey.Web/Controllers/AnswersController.cs", data-highlight="31")
    :markdown
      ### Store an answer

      When the caller has finished entering her response, Twilio will make a request to
      this controller including all the [call parameters](https://www.twilio.com/docs/api/twiml/twilio_request) we will need
      . For this sample application we will store the
      `RecordingUrl` or `Digits` parameter for voice and
      yes-no/numeric answers accordingly. For this sample we will also
      save the `CallSid` so we can uniquely identify a call.

      Most surveys include more than a single question so we must now
      redirect the user to the next question in this survey.

  .step(data-file="AutomatedSurvey.Web/Controllers/SurveysController.cs", data-highlight="38-49")
    :markdown
      ### Display the survey results

      For this route we simply query the database and display the information using a [Razor template](http://www.asp.net/web-pages/overview/getting-started/introducing-razor-syntax-(c)).

      You can access this page in the application through `surveys/results`.

  .step
    :markdown
      ### What’s next

      As you saw, build an application using Twilio numbers was a very straightforward. We hope you find this sample application useful. If you’re a C# developer working with Twilio, you might enjoy these other tutorials.

      * [Two-Factor Authentication with Authy](https://www.twilio.com/docs/howto/walkthrough/two-factor-authentication/csharp/mvc)
      * [Apointment Reminders](https://www.twilio.com/docs/howto/walkthrough/appointment-reminders/csharp/mvc)

  .step
    :markdown
      ### Did this help?

      If you have any feedback to share with us, we'd love to hear it. Tweet [@twilio](https://twitter.com/twilio) to let us know what you think.
