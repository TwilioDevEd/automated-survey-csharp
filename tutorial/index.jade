.chapter(data-title="Automated surveys with Twilio and ASP.NET MVC")
  .step(data-file="AutomatedSurvey.Web/Models/Survey.cs")
    :markdown
      ## About this application

      This [ASP.NET MVC](http://www.asp.net/mvc) sample application demonstrates
      using Twilio and [TwiML](https://www.twilio.com/docs/api/twiml) to deliver 
      a survey that can be completed via voice call.

      In this tutorial, we'll highlight the code necessary to power a automated 
      survey. To run this sample app yourself,
      [download the code and follow the instructions on
      GitHub](https://github.com/TwilioDevEd/automated-survey-csharp).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

      ---

      **See Also**

      * [ASP.NET MVC](http://www.asp.net/mvc)
      * [Code First Migrations](https://msdn.microsoft.com/en-us/data/jj591621.aspx)
      * [Visual Studio](https://www.visualstudio.com/)
      * [TwiML™: The Twilio Markup Language](Your Response https://www.twilio.com/docs/api/twiml)
      * [Twilio.TwiML](https://www.nuget.org/packages/Twilio.TwiML/)
      * [Twilio.Mvc](https://www.nuget.org/packages/Twilio.Mvc/)

  .step
    :markdown
      ## Configure Twilio Number

      In order to receive incoming calls we need to first configure our [Twilio phone number](https://www.twilio.com/user/account/phone-numbers/incoming).
      ![Configure Twilio Phone](https://raw.github.com/TwilioDevEd/automated-survey-csharp/master/configure-twilio-phone.png)

      Click on the red number, and then set the Voice Request URL. Don’t forget to save the changes.
      ![Set Voice Request URL](https://raw.github.com/TwilioDevEd/automated-survey-csharp/master/set-voice-request-url.png)

  .step(data-file="AutomatedSurvey.Web/Migrations/Configuration.cs" 
    data-highlight="13-49")
    :markdown
      ## Create a Survey
      The questions are created using the `Configuration.Seed` method.
      The advantage of this approach is that the data is populated when you run `Update-Database`.

      ---

      **See Also**
      * [Use Code First Migrations to Seed the Database](http://www.asp.net/web-api/overview/data/using-web-api-with-entity-framework/part-3)

  .step(data-file="AutomatedSurvey.Web/Controllers/SurveysController.cs", 
    data-highlight="23-35")
    :markdown
      ## Respond to Twilio’s initial request
      Whenever one of your [Twilio phone numbers](https://www.twilio.com/user/account/phone-numbers/incoming) 
      receives a call, Twillo will make an HTTP request to the voice request URL 
      configured under it with the HTTP method specified (either GET or POST).

      For this application Twilio should be configured to make a GET request to 
      the application’s `surveys/connectcall` endpoint. Here the application will 
      find the last created survey, use [`<Say>`](https://www.twilio.com/docs/api/twiml/say) 
      to speak  welcome message, and [`<Redirect>`](https://www.twilio.com/docs/api/twiml/redirect) 
      to the first question in the survey.

      ---

      **See Also**
      * [Twilio webhooks](https://www.twilio.com/platform/webhooks)
      * [Twilio Voice](Your Response https://www.twilio.com/docs/api/twiml/your_response)
      * [HTTP Methods](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)

  .step(data-file="AutomatedSurvey.Web/Domain/Response.cs", 
    data-highlight="29-41")
    :markdown
      ## Ask the caller a question
      At this point, Twilio has made a request for the first question. 
      We’re using the [twilio-csharp](https://github.com/twilio/twilio-csharp) 
      library to generate a TwiML response.

      After using [`<Say>`](https://www.twilio.com/docs/api/twiml/say) to ask 
      the user a question, we use either [`<Gather>`](https://www.twilio.com/docs/api/twiml/gather) 
      or [`<Record>`](https://www.twilio.com/docs/api/twiml/record) to collect
      an answer, depending on what type of question is being asked.

      ---

      **See Also**
      * [Twilio.TwiML](https://www.nuget.org/packages/Twilio.TwiML/)
      * [Twilio.Mvc](https://www.nuget.org/packages/Twilio.Mvc/)

  .step(data-file="AutomatedSurvey.Web/Domain/Response.cs", 
    data-highlight="43-56")
    :markdown
      ## Ask different types of questions
      If we want a number or boolean response from the user, we use the 
      [`<Gather>`](https://www.twilio.com/docs/api/twiml/gather) verb.
      For a free text response, we use [`<Record>`](https://www.twilio.com/docs/api/twiml/record) 
      to collect an answer.

      Both TwiML tags have an `action` attribute and a `method` attribute. Twilio 
      will use both attributes to make another HTTP request to our application 
      with the user's answer.

      Since we want to create a new resource on the server, we’ll use the `POST` 
      method. The `action` url will be `answers/create`.

      ---

      **See Also**
      * [Twilio.TwiML](https://www.nuget.org/packages/Twilio.TwiML/)
      * [Twilio.Mvc](https://www.nuget.org/packages/Twilio.Mvc/)

  .step(data-file="AutomatedSurvey.Web/Controllers/AnswersController.cs", 
    data-highlight="28-39")
    :markdown
      ## Record the caller’s response
      When the caller has finished entering her response, Twilio will make a request to
      this controller including all the [call parameters](https://www.twilio.com/docs/api/twiml/twilio_request) 
      we will need. For this sample application we will store either the
      `RecordingUrl` for free-answer responses, or parse `Digits` for number or
      boolean responses. We'll also track the `CallSid` so we can track answers
      for a specific survey response.

      Most surveys include more than a single question so we must now
      redirect the user to the next question in this survey. This process will 
      repeat until we are done collecting results of the survey.

  .step(data-file="AutomatedSurvey.Web/Controllers/SurveysController.cs", 
    data-highlight="37-48")
    :markdown
      ## Display the survey results

      For this route we simply query the database and display the information 
      using a [Razor template](http://www.asp.net/web-pages/overview/getting-started/).

      You can access this page in the application at `/surveys/results`.

  .step
    :markdown
      ## What’s next?

      As you saw, build an application using Twilio numbers was a very 
      straightforward. We hope you find this sample application useful. 
      If you’re a C# developer working with Twilio, you might enjoy these other 
      tutorials.

      * [Two-Factor Authentication with Authy](https://www.twilio.com/docs/howto/walkthrough/two-factor-authentication/csharp/mvc)
      * [Appointment Reminders](https://www.twilio.com/docs/howto/walkthrough/appointment-reminders/csharp/mvc)

      #### Did this help?

      If you have any feedback to share with us, we'd love to hear it. 
      Tweet [@twilio](https://twitter.com/twilio) to let us know what you think.
